2023-11-25 15:30:20,094:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-11-25 15:30:20,094:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-11-25 15:30:20,094:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-11-25 15:30:20,095:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-11-25 15:30:21,388:INFO:PyCaret ClassificationExperiment
2023-11-25 15:30:21,389:INFO:Logging name: clf-default-name
2023-11-25 15:30:21,389:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-11-25 15:30:21,389:INFO:version 3.2.0
2023-11-25 15:30:21,389:INFO:Initializing setup()
2023-11-25 15:30:21,389:INFO:self.USI: b4c6
2023-11-25 15:30:21,389:INFO:self._variable_keys: {'gpu_n_jobs_param', 'X_test', 'pipeline', 'memory', 'fold_generator', '_available_plots', 'X', 'logging_param', 'y_test', '_ml_usecase', 'fold_shuffle_param', 'idx', 'html_param', 'fold_groups_param', 'exp_name_log', 'y', 'fix_imbalance', 'is_multiclass', 'target_param', 'data', 'X_train', 'y_train', 'seed', 'log_plots_param', 'n_jobs_param', 'USI', 'gpu_param', 'exp_id'}
2023-11-25 15:30:21,389:INFO:Checking environment
2023-11-25 15:30:21,389:INFO:python_version: 3.10.11
2023-11-25 15:30:21,389:INFO:python_build: ('main', 'Apr 20 2023 18:56:50')
2023-11-25 15:30:21,389:INFO:machine: AMD64
2023-11-25 15:30:21,389:INFO:platform: Windows-10-10.0.19045-SP0
2023-11-25 15:30:21,389:INFO:Memory: svmem(total=17094782976, available=3056734208, percent=82.1, used=14038048768, free=3056734208)
2023-11-25 15:30:21,389:INFO:Physical Core: 8
2023-11-25 15:30:21,389:INFO:Logical Core: 16
2023-11-25 15:30:21,389:INFO:Checking libraries
2023-11-25 15:30:21,390:INFO:System:
2023-11-25 15:30:21,390:INFO:    python: 3.10.11 | packaged by Anaconda, Inc. | (main, Apr 20 2023, 18:56:50) [MSC v.1916 64 bit (AMD64)]
2023-11-25 15:30:21,390:INFO:executable: d:\io\Anaconda\envs\dev\python.exe
2023-11-25 15:30:21,390:INFO:   machine: Windows-10-10.0.19045-SP0
2023-11-25 15:30:21,390:INFO:PyCaret required dependencies:
2023-11-25 15:30:22,068:INFO:                 pip: 23.0.1
2023-11-25 15:30:22,068:INFO:          setuptools: 67.8.0
2023-11-25 15:30:22,068:INFO:             pycaret: 3.2.0
2023-11-25 15:30:22,068:INFO:             IPython: 8.12.0
2023-11-25 15:30:22,068:INFO:          ipywidgets: 7.7.2
2023-11-25 15:30:22,068:INFO:                tqdm: 4.65.0
2023-11-25 15:30:22,068:INFO:               numpy: 1.24.3
2023-11-25 15:30:22,068:INFO:              pandas: 1.5.3
2023-11-25 15:30:22,068:INFO:              jinja2: 3.1.2
2023-11-25 15:30:22,068:INFO:               scipy: 1.10.1
2023-11-25 15:30:22,068:INFO:              joblib: 1.2.0
2023-11-25 15:30:22,069:INFO:             sklearn: 1.2.2
2023-11-25 15:30:22,069:INFO:                pyod: 1.1.2
2023-11-25 15:30:22,069:INFO:            imblearn: 0.10.1
2023-11-25 15:30:22,069:INFO:   category_encoders: 2.6.3
2023-11-25 15:30:22,069:INFO:            lightgbm: 4.1.0
2023-11-25 15:30:22,069:INFO:               numba: 0.57.0
2023-11-25 15:30:22,069:INFO:            requests: 2.29.0
2023-11-25 15:30:22,069:INFO:          matplotlib: 3.6.0
2023-11-25 15:30:22,069:INFO:          scikitplot: 0.3.7
2023-11-25 15:30:22,069:INFO:         yellowbrick: 1.5
2023-11-25 15:30:22,069:INFO:              plotly: 5.9.0
2023-11-25 15:30:22,069:INFO:    plotly-resampler: Not installed
2023-11-25 15:30:22,069:INFO:             kaleido: 0.2.1
2023-11-25 15:30:22,069:INFO:           schemdraw: 0.15
2023-11-25 15:30:22,069:INFO:         statsmodels: 0.13.5
2023-11-25 15:30:22,069:INFO:              sktime: 0.21.1
2023-11-25 15:30:22,069:INFO:               tbats: 1.1.3
2023-11-25 15:30:22,069:INFO:            pmdarima: 2.0.4
2023-11-25 15:30:22,069:INFO:              psutil: 5.9.0
2023-11-25 15:30:22,069:INFO:          markupsafe: 2.1.1
2023-11-25 15:30:22,069:INFO:             pickle5: Not installed
2023-11-25 15:30:22,069:INFO:         cloudpickle: 2.2.1
2023-11-25 15:30:22,070:INFO:         deprecation: 2.1.0
2023-11-25 15:30:22,070:INFO:              xxhash: 2.0.2
2023-11-25 15:30:22,070:INFO:           wurlitzer: Not installed
2023-11-25 15:30:22,070:INFO:PyCaret optional dependencies:
2023-11-25 15:30:23,913:INFO:                shap: 0.43.0
2023-11-25 15:30:23,913:INFO:           interpret: 0.4.4
2023-11-25 15:30:23,913:INFO:                umap: 0.5.5
2023-11-25 15:30:23,913:INFO:     ydata_profiling: 4.6.0
2023-11-25 15:30:23,913:INFO:  explainerdashboard: 0.4.3
2023-11-25 15:30:23,913:INFO:             autoviz: Not installed
2023-11-25 15:30:23,913:INFO:           fairlearn: 0.7.0
2023-11-25 15:30:23,913:INFO:          deepchecks: Not installed
2023-11-25 15:30:23,913:INFO:             xgboost: 2.0.2
2023-11-25 15:30:23,913:INFO:            catboost: 1.2.2
2023-11-25 15:30:23,913:INFO:              kmodes: 0.12.2
2023-11-25 15:30:23,913:INFO:             mlxtend: 0.23.0
2023-11-25 15:30:23,913:INFO:       statsforecast: 1.5.0
2023-11-25 15:30:23,913:INFO:        tune_sklearn: 0.5.0
2023-11-25 15:30:23,913:INFO:                 ray: 2.8.0
2023-11-25 15:30:23,913:INFO:            hyperopt: 0.2.7
2023-11-25 15:30:23,913:INFO:              optuna: 3.4.0
2023-11-25 15:30:23,913:INFO:               skopt: 0.9.0
2023-11-25 15:30:23,913:INFO:              mlflow: 1.30.1
2023-11-25 15:30:23,913:INFO:              gradio: 3.50.2
2023-11-25 15:30:23,913:INFO:             fastapi: 0.104.1
2023-11-25 15:30:23,913:INFO:             uvicorn: 0.24.0.post1
2023-11-25 15:30:23,914:INFO:              m2cgen: 0.10.0
2023-11-25 15:30:23,914:INFO:           evidently: 0.2.8
2023-11-25 15:30:23,914:INFO:               fugue: 0.8.6
2023-11-25 15:30:23,914:INFO:           streamlit: Not installed
2023-11-25 15:30:23,914:INFO:             prophet: Not installed
2023-11-25 15:30:23,914:INFO:None
2023-11-25 15:30:23,914:INFO:Set up data.
2023-11-25 15:30:23,943:INFO:Set up folding strategy.
2023-11-25 15:30:23,943:INFO:Set up train/test split.
2023-11-25 15:30:23,964:INFO:Set up index.
2023-11-25 15:30:23,965:INFO:Assigning column types.
2023-11-25 15:30:23,969:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-11-25 15:30:24,005:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-11-25 15:30:24,007:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-25 15:30:24,037:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-25 15:30:24,039:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-25 15:30:24,318:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-11-25 15:30:24,320:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-25 15:30:24,343:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-25 15:30:24,345:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-25 15:30:24,346:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-11-25 15:30:24,382:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-25 15:30:24,404:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-25 15:30:24,406:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-25 15:30:24,442:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-25 15:30:24,464:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-25 15:30:24,466:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-25 15:30:24,467:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-11-25 15:30:24,524:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-25 15:30:24,526:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-25 15:30:24,584:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-25 15:30:24,586:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-25 15:30:24,589:INFO:Preparing preprocessing pipeline...
2023-11-25 15:30:24,590:INFO:Set up label encoding.
2023-11-25 15:30:24,591:INFO:Set up simple imputation.
2023-11-25 15:30:24,598:INFO:Set up encoding of ordinal features.
2023-11-25 15:30:24,604:INFO:Set up encoding of categorical features.
2023-11-25 15:30:24,951:INFO:Finished creating preprocessing pipeline.
2023-11-25 15:30:25,000:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\benny\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['senior_citizen', 'tenure',
                                             'monthly_charges'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['customer_ID', 'total_charges'],
                                    transformer=TargetEncoder(cols=['customer_ID',
                                                                    'total_charges'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2023-11-25 15:30:25,000:INFO:Creating final display dataframe.
2023-11-25 15:30:25,701:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7043, 21)
5        Transformed data shape        (7043, 42)
6   Transformed train set shape        (4930, 42)
7    Transformed test set shape        (2113, 42)
8              Ordinal features                 5
9              Numeric features                 3
10         Categorical features                17
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              b4c6
2023-11-25 15:30:25,770:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-25 15:30:25,772:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-25 15:30:25,834:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-25 15:30:25,836:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-25 15:30:25,837:INFO:setup() successfully completed in 4.45s...............
2023-11-25 15:30:25,837:INFO:Initializing compare_models()
2023-11-25 15:30:25,837:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-11-25 15:30:25,837:INFO:Checking exceptions
2023-11-25 15:30:25,841:INFO:Preparing display monitor
2023-11-25 15:30:25,864:INFO:Initializing Logistic Regression
2023-11-25 15:30:25,864:INFO:Total runtime is 0.0 minutes
2023-11-25 15:30:25,868:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:25,868:INFO:Initializing create_model()
2023-11-25 15:30:25,868:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:25,868:INFO:Checking exceptions
2023-11-25 15:30:25,869:INFO:Importing libraries
2023-11-25 15:30:25,869:INFO:Copying training dataset
2023-11-25 15:30:25,874:INFO:Defining folds
2023-11-25 15:30:25,874:INFO:Declaring metric variables
2023-11-25 15:30:25,877:INFO:Importing untrained model
2023-11-25 15:30:25,881:INFO:Logistic Regression Imported successfully
2023-11-25 15:30:25,887:INFO:Starting cross validation
2023-11-25 15:30:25,890:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:31,699:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-25 15:30:31,699:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-25 15:30:31,730:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-25 15:30:31,753:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,759:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,763:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,766:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,770:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,774:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,790:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,791:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,794:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,797:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,799:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,802:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,803:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,805:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,808:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,809:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,810:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,813:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,814:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,815:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,820:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,830:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,837:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,843:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,850:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,857:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,859:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,864:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,865:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,871:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:31,879:INFO:Calculating mean and std
2023-11-25 15:30:31,880:INFO:Creating metrics dataframe
2023-11-25 15:30:31,885:INFO:Uploading results into container
2023-11-25 15:30:31,885:INFO:Uploading model into container now
2023-11-25 15:30:31,886:INFO:_master_model_container: 1
2023-11-25 15:30:31,886:INFO:_display_container: 2
2023-11-25 15:30:31,886:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-11-25 15:30:31,887:INFO:create_model() successfully completed......................................
2023-11-25 15:30:31,995:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:31,996:INFO:Creating metrics dataframe
2023-11-25 15:30:32,003:INFO:Initializing K Neighbors Classifier
2023-11-25 15:30:32,003:INFO:Total runtime is 0.10231665372848511 minutes
2023-11-25 15:30:32,006:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:32,006:INFO:Initializing create_model()
2023-11-25 15:30:32,007:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:32,007:INFO:Checking exceptions
2023-11-25 15:30:32,007:INFO:Importing libraries
2023-11-25 15:30:32,007:INFO:Copying training dataset
2023-11-25 15:30:32,013:INFO:Defining folds
2023-11-25 15:30:32,013:INFO:Declaring metric variables
2023-11-25 15:30:32,016:INFO:Importing untrained model
2023-11-25 15:30:32,019:INFO:K Neighbors Classifier Imported successfully
2023-11-25 15:30:32,025:INFO:Starting cross validation
2023-11-25 15:30:32,027:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:32,748:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:32,752:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:32,754:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:32,758:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:32,759:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:32,761:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:32,762:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:32,767:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:32,771:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:32,773:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:32,776:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:32,780:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,468:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,470:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,473:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,473:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,478:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,482:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,506:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,510:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,511:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,514:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,515:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,516:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,519:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,520:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,523:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,523:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,527:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,531:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:35,541:INFO:Calculating mean and std
2023-11-25 15:30:35,543:INFO:Creating metrics dataframe
2023-11-25 15:30:35,546:INFO:Uploading results into container
2023-11-25 15:30:35,547:INFO:Uploading model into container now
2023-11-25 15:30:35,547:INFO:_master_model_container: 2
2023-11-25 15:30:35,547:INFO:_display_container: 2
2023-11-25 15:30:35,548:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-11-25 15:30:35,548:INFO:create_model() successfully completed......................................
2023-11-25 15:30:35,672:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:35,672:INFO:Creating metrics dataframe
2023-11-25 15:30:35,680:INFO:Initializing Naive Bayes
2023-11-25 15:30:35,681:INFO:Total runtime is 0.16360832850138346 minutes
2023-11-25 15:30:35,683:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:35,684:INFO:Initializing create_model()
2023-11-25 15:30:35,684:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:35,684:INFO:Checking exceptions
2023-11-25 15:30:35,684:INFO:Importing libraries
2023-11-25 15:30:35,684:INFO:Copying training dataset
2023-11-25 15:30:35,690:INFO:Defining folds
2023-11-25 15:30:35,690:INFO:Declaring metric variables
2023-11-25 15:30:35,693:INFO:Importing untrained model
2023-11-25 15:30:35,696:INFO:Naive Bayes Imported successfully
2023-11-25 15:30:35,701:INFO:Starting cross validation
2023-11-25 15:30:35,704:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:36,182:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,186:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,189:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,191:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,192:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,196:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,198:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,201:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,215:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,216:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,216:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,219:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,220:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,221:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,221:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,222:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,222:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,224:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,224:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,224:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,226:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,227:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,228:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,229:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,233:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,237:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,239:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,239:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,240:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,241:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,243:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,244:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,245:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,246:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,247:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,248:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,250:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,254:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,256:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,258:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,264:INFO:Calculating mean and std
2023-11-25 15:30:36,264:INFO:Creating metrics dataframe
2023-11-25 15:30:36,267:INFO:Uploading results into container
2023-11-25 15:30:36,268:INFO:Uploading model into container now
2023-11-25 15:30:36,268:INFO:_master_model_container: 3
2023-11-25 15:30:36,268:INFO:_display_container: 2
2023-11-25 15:30:36,269:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-11-25 15:30:36,269:INFO:create_model() successfully completed......................................
2023-11-25 15:30:36,362:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:36,363:INFO:Creating metrics dataframe
2023-11-25 15:30:36,371:INFO:Initializing Decision Tree Classifier
2023-11-25 15:30:36,371:INFO:Total runtime is 0.17511665026346843 minutes
2023-11-25 15:30:36,374:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:36,375:INFO:Initializing create_model()
2023-11-25 15:30:36,375:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:36,375:INFO:Checking exceptions
2023-11-25 15:30:36,375:INFO:Importing libraries
2023-11-25 15:30:36,375:INFO:Copying training dataset
2023-11-25 15:30:36,381:INFO:Defining folds
2023-11-25 15:30:36,381:INFO:Declaring metric variables
2023-11-25 15:30:36,384:INFO:Importing untrained model
2023-11-25 15:30:36,387:INFO:Decision Tree Classifier Imported successfully
2023-11-25 15:30:36,392:INFO:Starting cross validation
2023-11-25 15:30:36,395:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:36,892:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,895:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,895:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,898:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,899:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,902:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,902:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,902:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,904:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,905:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,908:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,912:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,914:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,915:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,917:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,920:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,921:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,921:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,923:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,924:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,927:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,927:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,929:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,931:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,931:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,933:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,933:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,935:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,936:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,939:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,943:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,945:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,947:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,966:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,970:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,972:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:36,974:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:36,980:INFO:Calculating mean and std
2023-11-25 15:30:36,981:INFO:Creating metrics dataframe
2023-11-25 15:30:36,984:INFO:Uploading results into container
2023-11-25 15:30:36,985:INFO:Uploading model into container now
2023-11-25 15:30:36,985:INFO:_master_model_container: 4
2023-11-25 15:30:36,985:INFO:_display_container: 2
2023-11-25 15:30:36,986:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=123, splitter='best')
2023-11-25 15:30:36,986:INFO:create_model() successfully completed......................................
2023-11-25 15:30:37,085:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:37,085:INFO:Creating metrics dataframe
2023-11-25 15:30:37,094:INFO:Initializing SVM - Linear Kernel
2023-11-25 15:30:37,094:INFO:Total runtime is 0.1871638337771098 minutes
2023-11-25 15:30:37,097:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:37,098:INFO:Initializing create_model()
2023-11-25 15:30:37,098:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:37,098:INFO:Checking exceptions
2023-11-25 15:30:37,098:INFO:Importing libraries
2023-11-25 15:30:37,098:INFO:Copying training dataset
2023-11-25 15:30:37,104:INFO:Defining folds
2023-11-25 15:30:37,104:INFO:Declaring metric variables
2023-11-25 15:30:37,107:INFO:Importing untrained model
2023-11-25 15:30:37,110:INFO:SVM - Linear Kernel Imported successfully
2023-11-25 15:30:37,116:INFO:Starting cross validation
2023-11-25 15:30:37,118:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:37,693:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-25 15:30:37,695:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,695:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,696:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-25 15:30:37,697:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-25 15:30:37,698:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,699:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,699:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,700:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,702:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,703:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-25 15:30:37,703:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,703:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,706:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,706:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,707:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,712:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-25 15:30:37,712:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,713:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,715:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,718:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,720:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,722:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-25 15:30:37,723:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,724:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,724:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-25 15:30:37,726:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,727:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,729:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-25 15:30:37,730:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,731:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,731:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,732:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:37,733:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-25 15:30:37,734:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,735:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,735:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,738:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,739:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,743:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:37,749:INFO:Calculating mean and std
2023-11-25 15:30:37,750:INFO:Creating metrics dataframe
2023-11-25 15:30:37,753:INFO:Uploading results into container
2023-11-25 15:30:37,753:INFO:Uploading model into container now
2023-11-25 15:30:37,753:INFO:_master_model_container: 5
2023-11-25 15:30:37,754:INFO:_display_container: 2
2023-11-25 15:30:37,754:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-11-25 15:30:37,754:INFO:create_model() successfully completed......................................
2023-11-25 15:30:37,847:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:37,847:INFO:Creating metrics dataframe
2023-11-25 15:30:37,856:INFO:Initializing Ridge Classifier
2023-11-25 15:30:37,856:INFO:Total runtime is 0.19986383914947511 minutes
2023-11-25 15:30:37,859:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:37,860:INFO:Initializing create_model()
2023-11-25 15:30:37,860:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:37,860:INFO:Checking exceptions
2023-11-25 15:30:37,860:INFO:Importing libraries
2023-11-25 15:30:37,860:INFO:Copying training dataset
2023-11-25 15:30:37,865:INFO:Defining folds
2023-11-25 15:30:37,866:INFO:Declaring metric variables
2023-11-25 15:30:37,869:INFO:Importing untrained model
2023-11-25 15:30:37,872:INFO:Ridge Classifier Imported successfully
2023-11-25 15:30:37,878:INFO:Starting cross validation
2023-11-25 15:30:37,881:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:38,411:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-25 15:30:38,412:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-25 15:30:38,414:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,414:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,415:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-25 15:30:38,417:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-25 15:30:38,418:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,420:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,420:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,421:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,422:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-25 15:30:38,422:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-25 15:30:38,423:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-25 15:30:38,424:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,425:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-25 15:30:38,425:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,425:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,425:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,426:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,426:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-25 15:30:38,426:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,427:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-25 15:30:38,427:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,427:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,428:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,428:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,429:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,430:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,431:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,431:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,433:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,433:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,434:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,435:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,436:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,436:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,436:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,437:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,440:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,440:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:38,448:INFO:Calculating mean and std
2023-11-25 15:30:38,449:INFO:Creating metrics dataframe
2023-11-25 15:30:38,452:INFO:Uploading results into container
2023-11-25 15:30:38,452:INFO:Uploading model into container now
2023-11-25 15:30:38,453:INFO:_master_model_container: 6
2023-11-25 15:30:38,453:INFO:_display_container: 2
2023-11-25 15:30:38,453:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2023-11-25 15:30:38,453:INFO:create_model() successfully completed......................................
2023-11-25 15:30:38,544:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:38,544:INFO:Creating metrics dataframe
2023-11-25 15:30:38,553:INFO:Initializing Random Forest Classifier
2023-11-25 15:30:38,553:INFO:Total runtime is 0.21147216558456422 minutes
2023-11-25 15:30:38,556:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:38,556:INFO:Initializing create_model()
2023-11-25 15:30:38,556:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:38,556:INFO:Checking exceptions
2023-11-25 15:30:38,556:INFO:Importing libraries
2023-11-25 15:30:38,556:INFO:Copying training dataset
2023-11-25 15:30:38,562:INFO:Defining folds
2023-11-25 15:30:38,563:INFO:Declaring metric variables
2023-11-25 15:30:38,565:INFO:Importing untrained model
2023-11-25 15:30:38,569:INFO:Random Forest Classifier Imported successfully
2023-11-25 15:30:38,574:INFO:Starting cross validation
2023-11-25 15:30:38,577:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:39,401:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,407:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,411:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:39,415:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,424:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,431:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,435:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:39,438:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,445:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,449:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,451:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,451:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,453:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,455:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,455:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:39,455:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,457:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:39,457:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:39,458:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,458:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,458:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,459:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,459:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,461:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:39,463:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,463:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,465:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:39,467:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,497:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,501:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,503:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:39,505:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,531:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,535:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,537:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:39,539:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,549:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,553:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,555:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:39,557:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:39,563:INFO:Calculating mean and std
2023-11-25 15:30:39,565:INFO:Creating metrics dataframe
2023-11-25 15:30:39,567:INFO:Uploading results into container
2023-11-25 15:30:39,568:INFO:Uploading model into container now
2023-11-25 15:30:39,568:INFO:_master_model_container: 7
2023-11-25 15:30:39,568:INFO:_display_container: 2
2023-11-25 15:30:39,569:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2023-11-25 15:30:39,569:INFO:create_model() successfully completed......................................
2023-11-25 15:30:39,673:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:39,673:INFO:Creating metrics dataframe
2023-11-25 15:30:39,688:INFO:Initializing Quadratic Discriminant Analysis
2023-11-25 15:30:39,689:INFO:Total runtime is 0.2304055174191793 minutes
2023-11-25 15:30:39,692:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:39,693:INFO:Initializing create_model()
2023-11-25 15:30:39,693:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:39,693:INFO:Checking exceptions
2023-11-25 15:30:39,694:INFO:Importing libraries
2023-11-25 15:30:39,694:INFO:Copying training dataset
2023-11-25 15:30:39,700:INFO:Defining folds
2023-11-25 15:30:39,700:INFO:Declaring metric variables
2023-11-25 15:30:39,703:INFO:Importing untrained model
2023-11-25 15:30:39,706:INFO:Quadratic Discriminant Analysis Imported successfully
2023-11-25 15:30:39,712:INFO:Starting cross validation
2023-11-25 15:30:39,715:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:40,139:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-25 15:30:40,139:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-25 15:30:40,140:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-25 15:30:40,140:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-25 15:30:40,148:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-25 15:30:40,149:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-25 15:30:40,159:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-25 15:30:40,160:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-25 15:30:40,163:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-25 15:30:40,238:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,238:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,242:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,242:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,243:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,243:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,245:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,245:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,247:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,248:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,248:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,248:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,249:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,250:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,250:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,251:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,251:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,252:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,253:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,254:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,255:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,255:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,257:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,257:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,258:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,259:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,260:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,261:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,261:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,263:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,263:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,264:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,265:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,266:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,267:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,268:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,270:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,270:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,272:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,273:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,281:INFO:Calculating mean and std
2023-11-25 15:30:40,282:INFO:Creating metrics dataframe
2023-11-25 15:30:40,285:INFO:Uploading results into container
2023-11-25 15:30:40,285:INFO:Uploading model into container now
2023-11-25 15:30:40,285:INFO:_master_model_container: 8
2023-11-25 15:30:40,285:INFO:_display_container: 2
2023-11-25 15:30:40,286:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-11-25 15:30:40,286:INFO:create_model() successfully completed......................................
2023-11-25 15:30:40,383:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:40,383:INFO:Creating metrics dataframe
2023-11-25 15:30:40,393:INFO:Initializing Ada Boost Classifier
2023-11-25 15:30:40,393:INFO:Total runtime is 0.2421388347943624 minutes
2023-11-25 15:30:40,396:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:40,396:INFO:Initializing create_model()
2023-11-25 15:30:40,396:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:40,396:INFO:Checking exceptions
2023-11-25 15:30:40,396:INFO:Importing libraries
2023-11-25 15:30:40,396:INFO:Copying training dataset
2023-11-25 15:30:40,402:INFO:Defining folds
2023-11-25 15:30:40,402:INFO:Declaring metric variables
2023-11-25 15:30:40,405:INFO:Importing untrained model
2023-11-25 15:30:40,408:INFO:Ada Boost Classifier Imported successfully
2023-11-25 15:30:40,414:INFO:Starting cross validation
2023-11-25 15:30:40,416:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:40,913:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,918:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,920:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,921:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,922:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,923:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,925:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,927:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,928:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,930:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,931:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,931:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,934:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,936:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,937:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,938:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,939:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,941:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,941:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,942:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,944:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,944:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,946:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,946:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,946:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,948:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,948:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,950:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,950:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,951:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,955:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,956:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,957:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,959:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,960:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,963:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,967:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,971:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,973:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:40,974:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:40,980:INFO:Calculating mean and std
2023-11-25 15:30:40,981:INFO:Creating metrics dataframe
2023-11-25 15:30:40,984:INFO:Uploading results into container
2023-11-25 15:30:40,985:INFO:Uploading model into container now
2023-11-25 15:30:40,985:INFO:_master_model_container: 9
2023-11-25 15:30:40,985:INFO:_display_container: 2
2023-11-25 15:30:40,985:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=123)
2023-11-25 15:30:40,985:INFO:create_model() successfully completed......................................
2023-11-25 15:30:41,077:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:41,077:INFO:Creating metrics dataframe
2023-11-25 15:30:41,087:INFO:Initializing Gradient Boosting Classifier
2023-11-25 15:30:41,087:INFO:Total runtime is 0.2537055253982544 minutes
2023-11-25 15:30:41,090:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:41,090:INFO:Initializing create_model()
2023-11-25 15:30:41,090:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:41,090:INFO:Checking exceptions
2023-11-25 15:30:41,090:INFO:Importing libraries
2023-11-25 15:30:41,090:INFO:Copying training dataset
2023-11-25 15:30:41,096:INFO:Defining folds
2023-11-25 15:30:41,096:INFO:Declaring metric variables
2023-11-25 15:30:41,100:INFO:Importing untrained model
2023-11-25 15:30:41,103:INFO:Gradient Boosting Classifier Imported successfully
2023-11-25 15:30:41,109:INFO:Starting cross validation
2023-11-25 15:30:41,112:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:41,897:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,904:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,906:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,907:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:41,910:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,912:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,913:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,915:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:41,916:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,917:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,919:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,919:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,920:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:41,920:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,923:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,923:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,924:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:41,925:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:41,926:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,928:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,933:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,936:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,937:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,939:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:41,939:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,940:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,940:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,941:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,941:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:41,943:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,944:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,944:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,946:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:41,946:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:41,947:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,948:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,953:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,957:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,959:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:41,960:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:41,966:INFO:Calculating mean and std
2023-11-25 15:30:41,967:INFO:Creating metrics dataframe
2023-11-25 15:30:41,970:INFO:Uploading results into container
2023-11-25 15:30:41,971:INFO:Uploading model into container now
2023-11-25 15:30:41,971:INFO:_master_model_container: 10
2023-11-25 15:30:41,971:INFO:_display_container: 2
2023-11-25 15:30:41,971:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-11-25 15:30:41,972:INFO:create_model() successfully completed......................................
2023-11-25 15:30:42,067:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:42,067:INFO:Creating metrics dataframe
2023-11-25 15:30:42,077:INFO:Initializing Linear Discriminant Analysis
2023-11-25 15:30:42,077:INFO:Total runtime is 0.2702138423919678 minutes
2023-11-25 15:30:42,080:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:42,081:INFO:Initializing create_model()
2023-11-25 15:30:42,081:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:42,081:INFO:Checking exceptions
2023-11-25 15:30:42,081:INFO:Importing libraries
2023-11-25 15:30:42,081:INFO:Copying training dataset
2023-11-25 15:30:42,086:INFO:Defining folds
2023-11-25 15:30:42,086:INFO:Declaring metric variables
2023-11-25 15:30:42,089:INFO:Importing untrained model
2023-11-25 15:30:42,093:INFO:Linear Discriminant Analysis Imported successfully
2023-11-25 15:30:42,098:INFO:Starting cross validation
2023-11-25 15:30:42,101:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:42,612:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,619:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,622:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:42,625:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,625:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,631:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,631:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,634:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:42,635:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,636:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,637:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,637:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,637:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,637:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,638:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:42,639:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,641:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,642:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,643:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:42,643:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,643:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,643:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,645:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,645:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:42,646:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:42,647:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:42,648:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,648:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,649:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,650:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,652:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:42,653:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,660:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,660:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,664:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,664:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,666:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:42,666:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:42,667:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,668:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:42,674:INFO:Calculating mean and std
2023-11-25 15:30:42,675:INFO:Creating metrics dataframe
2023-11-25 15:30:42,678:INFO:Uploading results into container
2023-11-25 15:30:42,678:INFO:Uploading model into container now
2023-11-25 15:30:42,678:INFO:_master_model_container: 11
2023-11-25 15:30:42,679:INFO:_display_container: 2
2023-11-25 15:30:42,679:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-11-25 15:30:42,679:INFO:create_model() successfully completed......................................
2023-11-25 15:30:42,769:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:42,770:INFO:Creating metrics dataframe
2023-11-25 15:30:42,781:INFO:Initializing Extra Trees Classifier
2023-11-25 15:30:42,781:INFO:Total runtime is 0.2819388508796692 minutes
2023-11-25 15:30:42,784:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:42,784:INFO:Initializing create_model()
2023-11-25 15:30:42,784:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:42,784:INFO:Checking exceptions
2023-11-25 15:30:42,784:INFO:Importing libraries
2023-11-25 15:30:42,784:INFO:Copying training dataset
2023-11-25 15:30:42,790:INFO:Defining folds
2023-11-25 15:30:42,790:INFO:Declaring metric variables
2023-11-25 15:30:42,793:INFO:Importing untrained model
2023-11-25 15:30:42,796:INFO:Extra Trees Classifier Imported successfully
2023-11-25 15:30:42,802:INFO:Starting cross validation
2023-11-25 15:30:42,804:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:43,625:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,632:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,634:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,635:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,639:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,640:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,641:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,642:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,647:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,648:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,648:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,653:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,654:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,660:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,662:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,662:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:43,664:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,666:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,667:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,670:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,672:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,675:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,710:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,714:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,714:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,717:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,718:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,722:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,732:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,736:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,740:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:43,746:INFO:Calculating mean and std
2023-11-25 15:30:43,747:INFO:Creating metrics dataframe
2023-11-25 15:30:43,750:INFO:Uploading results into container
2023-11-25 15:30:43,751:INFO:Uploading model into container now
2023-11-25 15:30:43,751:INFO:_master_model_container: 12
2023-11-25 15:30:43,751:INFO:_display_container: 2
2023-11-25 15:30:43,751:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=123, verbose=0, warm_start=False)
2023-11-25 15:30:43,751:INFO:create_model() successfully completed......................................
2023-11-25 15:30:43,844:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:43,844:INFO:Creating metrics dataframe
2023-11-25 15:30:43,855:INFO:Initializing Extreme Gradient Boosting
2023-11-25 15:30:43,855:INFO:Total runtime is 0.29983883698781333 minutes
2023-11-25 15:30:43,858:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:43,858:INFO:Initializing create_model()
2023-11-25 15:30:43,858:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:43,858:INFO:Checking exceptions
2023-11-25 15:30:43,858:INFO:Importing libraries
2023-11-25 15:30:43,858:INFO:Copying training dataset
2023-11-25 15:30:43,864:INFO:Defining folds
2023-11-25 15:30:43,864:INFO:Declaring metric variables
2023-11-25 15:30:43,867:INFO:Importing untrained model
2023-11-25 15:30:43,870:INFO:Extreme Gradient Boosting Imported successfully
2023-11-25 15:30:43,876:INFO:Starting cross validation
2023-11-25 15:30:43,879:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:44,697:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,697:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,698:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,699:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,699:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,701:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,702:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,703:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,703:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,704:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:44,705:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:44,705:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,706:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:44,706:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:44,706:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,706:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,707:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,708:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,708:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,708:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:44,709:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:44,711:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,711:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,711:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,711:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,714:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:44,716:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,717:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,718:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,720:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:44,721:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,721:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,723:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:44,723:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,724:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,725:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:44,727:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:44,733:INFO:Calculating mean and std
2023-11-25 15:30:44,734:INFO:Creating metrics dataframe
2023-11-25 15:30:44,737:INFO:Uploading results into container
2023-11-25 15:30:44,737:INFO:Uploading model into container now
2023-11-25 15:30:44,738:INFO:_master_model_container: 13
2023-11-25 15:30:44,738:INFO:_display_container: 2
2023-11-25 15:30:44,738:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2023-11-25 15:30:44,739:INFO:create_model() successfully completed......................................
2023-11-25 15:30:44,831:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:44,831:INFO:Creating metrics dataframe
2023-11-25 15:30:44,842:INFO:Initializing Light Gradient Boosting Machine
2023-11-25 15:30:44,842:INFO:Total runtime is 0.3162888328234355 minutes
2023-11-25 15:30:44,845:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:44,845:INFO:Initializing create_model()
2023-11-25 15:30:44,845:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:44,845:INFO:Checking exceptions
2023-11-25 15:30:44,845:INFO:Importing libraries
2023-11-25 15:30:44,845:INFO:Copying training dataset
2023-11-25 15:30:44,851:INFO:Defining folds
2023-11-25 15:30:44,851:INFO:Declaring metric variables
2023-11-25 15:30:44,854:INFO:Importing untrained model
2023-11-25 15:30:44,857:INFO:Light Gradient Boosting Machine Imported successfully
2023-11-25 15:30:44,863:INFO:Starting cross validation
2023-11-25 15:30:44,865:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:45,622:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,625:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,629:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,632:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,632:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:45,635:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,635:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:45,638:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,642:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,649:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,653:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:45,656:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,667:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,673:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,677:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:45,680:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,768:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,775:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,778:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:45,783:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,798:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,800:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,804:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,806:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,808:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:45,810:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:45,810:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,813:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,815:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,820:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,824:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:45,828:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,965:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,966:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,975:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,979:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,982:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:45,986:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:45,990:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:45,993:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:46,007:INFO:Calculating mean and std
2023-11-25 15:30:46,009:INFO:Creating metrics dataframe
2023-11-25 15:30:46,015:INFO:Uploading results into container
2023-11-25 15:30:46,018:INFO:Uploading model into container now
2023-11-25 15:30:46,019:INFO:_master_model_container: 14
2023-11-25 15:30:46,019:INFO:_display_container: 2
2023-11-25 15:30:46,019:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2023-11-25 15:30:46,020:INFO:create_model() successfully completed......................................
2023-11-25 15:30:46,128:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:46,128:INFO:Creating metrics dataframe
2023-11-25 15:30:46,140:INFO:Initializing CatBoost Classifier
2023-11-25 15:30:46,140:INFO:Total runtime is 0.33793051242828376 minutes
2023-11-25 15:30:46,144:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:46,144:INFO:Initializing create_model()
2023-11-25 15:30:46,144:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:46,144:INFO:Checking exceptions
2023-11-25 15:30:46,144:INFO:Importing libraries
2023-11-25 15:30:46,145:INFO:Copying training dataset
2023-11-25 15:30:46,151:INFO:Defining folds
2023-11-25 15:30:46,151:INFO:Declaring metric variables
2023-11-25 15:30:46,155:INFO:Importing untrained model
2023-11-25 15:30:46,158:INFO:CatBoost Classifier Imported successfully
2023-11-25 15:30:46,165:INFO:Starting cross validation
2023-11-25 15:30:46,169:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:54,299:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,306:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,310:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:54,313:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,640:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,647:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,650:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:54,653:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,867:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,874:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,878:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:54,881:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,884:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,891:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,894:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:54,897:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,969:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,976:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,980:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:54,983:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,983:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,990:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:54,994:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:54,997:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,064:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,071:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,075:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,078:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,144:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,151:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,154:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,157:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,183:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,187:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,189:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,192:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,276:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,280:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,282:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,284:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,291:INFO:Calculating mean and std
2023-11-25 15:30:55,292:INFO:Creating metrics dataframe
2023-11-25 15:30:55,295:INFO:Uploading results into container
2023-11-25 15:30:55,296:INFO:Uploading model into container now
2023-11-25 15:30:55,297:INFO:_master_model_container: 15
2023-11-25 15:30:55,297:INFO:_display_container: 2
2023-11-25 15:30:55,297:INFO:<catboost.core.CatBoostClassifier object at 0x0000027C1EC1D0C0>
2023-11-25 15:30:55,297:INFO:create_model() successfully completed......................................
2023-11-25 15:30:55,393:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:55,393:INFO:Creating metrics dataframe
2023-11-25 15:30:55,404:INFO:Initializing Dummy Classifier
2023-11-25 15:30:55,404:INFO:Total runtime is 0.4923304994901022 minutes
2023-11-25 15:30:55,407:INFO:SubProcess create_model() called ==================================
2023-11-25 15:30:55,407:INFO:Initializing create_model()
2023-11-25 15:30:55,407:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EE43D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:55,407:INFO:Checking exceptions
2023-11-25 15:30:55,407:INFO:Importing libraries
2023-11-25 15:30:55,407:INFO:Copying training dataset
2023-11-25 15:30:55,413:INFO:Defining folds
2023-11-25 15:30:55,413:INFO:Declaring metric variables
2023-11-25 15:30:55,416:INFO:Importing untrained model
2023-11-25 15:30:55,420:INFO:Dummy Classifier Imported successfully
2023-11-25 15:30:55,425:INFO:Starting cross validation
2023-11-25 15:30:55,427:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-25 15:30:55,892:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,899:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,907:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,922:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,927:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,934:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,938:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,941:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,946:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,953:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,955:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,957:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,959:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,960:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,961:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,963:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,964:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,966:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,967:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,969:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,978:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,981:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,982:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,983:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,984:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,985:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,986:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,986:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,987:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,988:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,989:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,990:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,991:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,995:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,997:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:55,997:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:55,999:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:56,000:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:56,003:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-25 15:30:56,004:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-11-25 15:30:56,010:INFO:Calculating mean and std
2023-11-25 15:30:56,011:INFO:Creating metrics dataframe
2023-11-25 15:30:56,014:INFO:Uploading results into container
2023-11-25 15:30:56,015:INFO:Uploading model into container now
2023-11-25 15:30:56,015:INFO:_master_model_container: 16
2023-11-25 15:30:56,015:INFO:_display_container: 2
2023-11-25 15:30:56,015:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2023-11-25 15:30:56,015:INFO:create_model() successfully completed......................................
2023-11-25 15:30:56,109:INFO:SubProcess create_model() end ==================================
2023-11-25 15:30:56,109:INFO:Creating metrics dataframe
2023-11-25 15:30:56,129:INFO:Initializing create_model()
2023-11-25 15:30:56,130:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C0EA4DC90>, estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-25 15:30:56,130:INFO:Checking exceptions
2023-11-25 15:30:56,131:INFO:Importing libraries
2023-11-25 15:30:56,131:INFO:Copying training dataset
2023-11-25 15:30:56,137:INFO:Defining folds
2023-11-25 15:30:56,137:INFO:Declaring metric variables
2023-11-25 15:30:56,137:INFO:Importing untrained model
2023-11-25 15:30:56,137:INFO:Declaring custom model
2023-11-25 15:30:56,137:INFO:K Neighbors Classifier Imported successfully
2023-11-25 15:30:56,139:INFO:Cross validation set to False
2023-11-25 15:30:56,139:INFO:Fitting Model
2023-11-25 15:30:56,350:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-11-25 15:30:56,350:INFO:create_model() successfully completed......................................
2023-11-25 15:30:56,475:INFO:_master_model_container: 16
2023-11-25 15:30:56,475:INFO:_display_container: 2
2023-11-25 15:30:56,476:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-11-25 15:30:56,476:INFO:compare_models() successfully completed......................................
2023-11-26 11:13:59,729:INFO:PyCaret ClassificationExperiment
2023-11-26 11:13:59,730:INFO:Logging name: clf-default-name
2023-11-26 11:13:59,730:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-11-26 11:13:59,730:INFO:version 3.2.0
2023-11-26 11:13:59,730:INFO:Initializing setup()
2023-11-26 11:13:59,730:INFO:self.USI: a675
2023-11-26 11:13:59,730:INFO:self._variable_keys: {'gpu_n_jobs_param', 'X_test', 'pipeline', 'memory', 'fold_generator', '_available_plots', 'X', 'logging_param', 'y_test', '_ml_usecase', 'fold_shuffle_param', 'idx', 'html_param', 'fold_groups_param', 'exp_name_log', 'y', 'fix_imbalance', 'is_multiclass', 'target_param', 'data', 'X_train', 'y_train', 'seed', 'log_plots_param', 'n_jobs_param', 'USI', 'gpu_param', 'exp_id'}
2023-11-26 11:13:59,730:INFO:Checking environment
2023-11-26 11:13:59,730:INFO:python_version: 3.10.11
2023-11-26 11:13:59,730:INFO:python_build: ('main', 'Apr 20 2023 18:56:50')
2023-11-26 11:13:59,730:INFO:machine: AMD64
2023-11-26 11:13:59,730:INFO:platform: Windows-10-10.0.19045-SP0
2023-11-26 11:13:59,731:INFO:Memory: svmem(total=17094782976, available=4089847808, percent=76.1, used=13004935168, free=4089847808)
2023-11-26 11:13:59,731:INFO:Physical Core: 8
2023-11-26 11:13:59,731:INFO:Logical Core: 16
2023-11-26 11:13:59,731:INFO:Checking libraries
2023-11-26 11:13:59,731:INFO:System:
2023-11-26 11:13:59,731:INFO:    python: 3.10.11 | packaged by Anaconda, Inc. | (main, Apr 20 2023, 18:56:50) [MSC v.1916 64 bit (AMD64)]
2023-11-26 11:13:59,731:INFO:executable: d:\io\Anaconda\envs\dev\python.exe
2023-11-26 11:13:59,731:INFO:   machine: Windows-10-10.0.19045-SP0
2023-11-26 11:13:59,731:INFO:PyCaret required dependencies:
2023-11-26 11:13:59,731:INFO:                 pip: 23.0.1
2023-11-26 11:13:59,731:INFO:          setuptools: 67.8.0
2023-11-26 11:13:59,731:INFO:             pycaret: 3.2.0
2023-11-26 11:13:59,731:INFO:             IPython: 8.12.0
2023-11-26 11:13:59,731:INFO:          ipywidgets: 7.7.2
2023-11-26 11:13:59,731:INFO:                tqdm: 4.65.0
2023-11-26 11:13:59,731:INFO:               numpy: 1.24.3
2023-11-26 11:13:59,731:INFO:              pandas: 1.5.3
2023-11-26 11:13:59,731:INFO:              jinja2: 3.1.2
2023-11-26 11:13:59,731:INFO:               scipy: 1.10.1
2023-11-26 11:13:59,732:INFO:              joblib: 1.2.0
2023-11-26 11:13:59,732:INFO:             sklearn: 1.2.2
2023-11-26 11:13:59,732:INFO:                pyod: 1.1.2
2023-11-26 11:13:59,732:INFO:            imblearn: 0.10.1
2023-11-26 11:13:59,732:INFO:   category_encoders: 2.6.3
2023-11-26 11:13:59,732:INFO:            lightgbm: 4.1.0
2023-11-26 11:13:59,732:INFO:               numba: 0.57.0
2023-11-26 11:13:59,732:INFO:            requests: 2.29.0
2023-11-26 11:13:59,732:INFO:          matplotlib: 3.6.0
2023-11-26 11:13:59,732:INFO:          scikitplot: 0.3.7
2023-11-26 11:13:59,732:INFO:         yellowbrick: 1.5
2023-11-26 11:13:59,732:INFO:              plotly: 5.9.0
2023-11-26 11:13:59,732:INFO:    plotly-resampler: Not installed
2023-11-26 11:13:59,732:INFO:             kaleido: 0.2.1
2023-11-26 11:13:59,732:INFO:           schemdraw: 0.15
2023-11-26 11:13:59,732:INFO:         statsmodels: 0.13.5
2023-11-26 11:13:59,732:INFO:              sktime: 0.21.1
2023-11-26 11:13:59,732:INFO:               tbats: 1.1.3
2023-11-26 11:13:59,732:INFO:            pmdarima: 2.0.4
2023-11-26 11:13:59,732:INFO:              psutil: 5.9.0
2023-11-26 11:13:59,732:INFO:          markupsafe: 2.1.1
2023-11-26 11:13:59,732:INFO:             pickle5: Not installed
2023-11-26 11:13:59,732:INFO:         cloudpickle: 2.2.1
2023-11-26 11:13:59,732:INFO:         deprecation: 2.1.0
2023-11-26 11:13:59,733:INFO:              xxhash: 2.0.2
2023-11-26 11:13:59,733:INFO:           wurlitzer: Not installed
2023-11-26 11:13:59,733:INFO:PyCaret optional dependencies:
2023-11-26 11:13:59,733:INFO:                shap: 0.43.0
2023-11-26 11:13:59,733:INFO:           interpret: 0.4.4
2023-11-26 11:13:59,733:INFO:                umap: 0.5.5
2023-11-26 11:13:59,733:INFO:     ydata_profiling: 4.6.0
2023-11-26 11:13:59,733:INFO:  explainerdashboard: 0.4.3
2023-11-26 11:13:59,733:INFO:             autoviz: Not installed
2023-11-26 11:13:59,733:INFO:           fairlearn: 0.7.0
2023-11-26 11:13:59,733:INFO:          deepchecks: Not installed
2023-11-26 11:13:59,733:INFO:             xgboost: 2.0.2
2023-11-26 11:13:59,733:INFO:            catboost: 1.2.2
2023-11-26 11:13:59,733:INFO:              kmodes: 0.12.2
2023-11-26 11:13:59,733:INFO:             mlxtend: 0.23.0
2023-11-26 11:13:59,733:INFO:       statsforecast: 1.5.0
2023-11-26 11:13:59,733:INFO:        tune_sklearn: 0.5.0
2023-11-26 11:13:59,733:INFO:                 ray: 2.8.0
2023-11-26 11:13:59,733:INFO:            hyperopt: 0.2.7
2023-11-26 11:13:59,733:INFO:              optuna: 3.4.0
2023-11-26 11:13:59,733:INFO:               skopt: 0.9.0
2023-11-26 11:13:59,733:INFO:              mlflow: 1.30.1
2023-11-26 11:13:59,733:INFO:              gradio: 3.50.2
2023-11-26 11:13:59,734:INFO:             fastapi: 0.104.1
2023-11-26 11:13:59,734:INFO:             uvicorn: 0.24.0.post1
2023-11-26 11:13:59,734:INFO:              m2cgen: 0.10.0
2023-11-26 11:13:59,734:INFO:           evidently: 0.2.8
2023-11-26 11:13:59,734:INFO:               fugue: 0.8.6
2023-11-26 11:13:59,734:INFO:           streamlit: Not installed
2023-11-26 11:13:59,734:INFO:             prophet: Not installed
2023-11-26 11:13:59,734:INFO:None
2023-11-26 11:13:59,734:INFO:Set up data.
2023-11-26 11:13:59,748:INFO:Set up folding strategy.
2023-11-26 11:13:59,748:INFO:Set up train/test split.
2023-11-26 11:13:59,758:INFO:Set up index.
2023-11-26 11:13:59,758:INFO:Assigning column types.
2023-11-26 11:13:59,762:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-11-26 11:13:59,800:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-11-26 11:13:59,800:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-26 11:13:59,823:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-26 11:13:59,826:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-26 11:13:59,872:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-11-26 11:13:59,872:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-26 11:13:59,895:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-26 11:13:59,897:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-26 11:13:59,898:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-11-26 11:13:59,935:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-26 11:13:59,958:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-26 11:13:59,960:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-26 11:13:59,997:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-11-26 11:14:00,021:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-26 11:14:00,023:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-26 11:14:00,024:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-11-26 11:14:00,083:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-26 11:14:00,085:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-26 11:14:00,147:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-26 11:14:00,149:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-26 11:14:00,151:INFO:Preparing preprocessing pipeline...
2023-11-26 11:14:00,153:INFO:Set up simple imputation.
2023-11-26 11:14:00,153:INFO:Set up column name cleaning.
2023-11-26 11:14:00,176:INFO:Finished creating preprocessing pipeline.
2023-11-26 11:14:00,181:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\benny\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['gender', 'senior_citizen',
                                             'partner', 'dependents', 'tenure',
                                             'phone_service',
                                             'paperless_billing',
                                             'monthly_charges', 'total_charges',
                                             'multiple_lines_No',
                                             'multiple_lines_No phone service',
                                             'multiple_lines_Yes',
                                             'i...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2023-11-26 11:14:00,181:INFO:Creating final display dataframe.
2023-11-26 11:14:00,264:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             churn
2                   Target type            Binary
3           Original data shape        (7043, 41)
4        Transformed data shape        (7043, 41)
5   Transformed train set shape        (4930, 41)
6    Transformed test set shape        (2113, 41)
7              Numeric features                40
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   StratifiedKFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  clf-default-name
18                          USI              a675
2023-11-26 11:14:00,331:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-26 11:14:00,333:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-26 11:14:00,393:INFO:Soft dependency imported: xgboost: 2.0.2
2023-11-26 11:14:00,395:INFO:Soft dependency imported: catboost: 1.2.2
2023-11-26 11:14:00,396:INFO:setup() successfully completed in 0.67s...............
2023-11-26 11:14:00,401:INFO:Initializing compare_models()
2023-11-26 11:14:00,401:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-11-26 11:14:00,401:INFO:Checking exceptions
2023-11-26 11:14:00,405:INFO:Preparing display monitor
2023-11-26 11:14:00,426:INFO:Initializing Logistic Regression
2023-11-26 11:14:00,427:INFO:Total runtime is 1.663366953531901e-05 minutes
2023-11-26 11:14:00,430:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:00,431:INFO:Initializing create_model()
2023-11-26 11:14:00,431:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:00,431:INFO:Checking exceptions
2023-11-26 11:14:00,431:INFO:Importing libraries
2023-11-26 11:14:00,431:INFO:Copying training dataset
2023-11-26 11:14:00,436:INFO:Defining folds
2023-11-26 11:14:00,436:INFO:Declaring metric variables
2023-11-26 11:14:00,439:INFO:Importing untrained model
2023-11-26 11:14:00,442:INFO:Logistic Regression Imported successfully
2023-11-26 11:14:00,449:INFO:Starting cross validation
2023-11-26 11:14:00,451:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:16,976:INFO:Calculating mean and std
2023-11-26 11:14:16,978:INFO:Creating metrics dataframe
2023-11-26 11:14:16,984:INFO:Uploading results into container
2023-11-26 11:14:16,985:INFO:Uploading model into container now
2023-11-26 11:14:16,986:INFO:_master_model_container: 1
2023-11-26 11:14:16,986:INFO:_display_container: 2
2023-11-26 11:14:16,987:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-11-26 11:14:16,987:INFO:create_model() successfully completed......................................
2023-11-26 11:14:17,156:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:17,156:INFO:Creating metrics dataframe
2023-11-26 11:14:17,165:INFO:Initializing K Neighbors Classifier
2023-11-26 11:14:17,165:INFO:Total runtime is 0.2789897600809733 minutes
2023-11-26 11:14:17,168:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:17,168:INFO:Initializing create_model()
2023-11-26 11:14:17,168:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:17,168:INFO:Checking exceptions
2023-11-26 11:14:17,168:INFO:Importing libraries
2023-11-26 11:14:17,168:INFO:Copying training dataset
2023-11-26 11:14:17,174:INFO:Defining folds
2023-11-26 11:14:17,174:INFO:Declaring metric variables
2023-11-26 11:14:17,177:INFO:Importing untrained model
2023-11-26 11:14:17,180:INFO:K Neighbors Classifier Imported successfully
2023-11-26 11:14:17,186:INFO:Starting cross validation
2023-11-26 11:14:17,187:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:20,143:INFO:Calculating mean and std
2023-11-26 11:14:20,144:INFO:Creating metrics dataframe
2023-11-26 11:14:20,148:INFO:Uploading results into container
2023-11-26 11:14:20,149:INFO:Uploading model into container now
2023-11-26 11:14:20,149:INFO:_master_model_container: 2
2023-11-26 11:14:20,149:INFO:_display_container: 2
2023-11-26 11:14:20,150:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-11-26 11:14:20,150:INFO:create_model() successfully completed......................................
2023-11-26 11:14:20,310:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:20,310:INFO:Creating metrics dataframe
2023-11-26 11:14:20,319:INFO:Initializing Naive Bayes
2023-11-26 11:14:20,319:INFO:Total runtime is 0.3315515160560608 minutes
2023-11-26 11:14:20,322:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:20,322:INFO:Initializing create_model()
2023-11-26 11:14:20,323:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:20,323:INFO:Checking exceptions
2023-11-26 11:14:20,323:INFO:Importing libraries
2023-11-26 11:14:20,323:INFO:Copying training dataset
2023-11-26 11:14:20,329:INFO:Defining folds
2023-11-26 11:14:20,329:INFO:Declaring metric variables
2023-11-26 11:14:20,332:INFO:Importing untrained model
2023-11-26 11:14:20,335:INFO:Naive Bayes Imported successfully
2023-11-26 11:14:20,341:INFO:Starting cross validation
2023-11-26 11:14:20,342:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:20,415:INFO:Calculating mean and std
2023-11-26 11:14:20,416:INFO:Creating metrics dataframe
2023-11-26 11:14:20,418:INFO:Uploading results into container
2023-11-26 11:14:20,419:INFO:Uploading model into container now
2023-11-26 11:14:20,419:INFO:_master_model_container: 3
2023-11-26 11:14:20,419:INFO:_display_container: 2
2023-11-26 11:14:20,419:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-11-26 11:14:20,419:INFO:create_model() successfully completed......................................
2023-11-26 11:14:20,565:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:20,565:INFO:Creating metrics dataframe
2023-11-26 11:14:20,573:INFO:Initializing Decision Tree Classifier
2023-11-26 11:14:20,573:INFO:Total runtime is 0.3357848525047302 minutes
2023-11-26 11:14:20,576:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:20,576:INFO:Initializing create_model()
2023-11-26 11:14:20,576:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:20,576:INFO:Checking exceptions
2023-11-26 11:14:20,576:INFO:Importing libraries
2023-11-26 11:14:20,576:INFO:Copying training dataset
2023-11-26 11:14:20,583:INFO:Defining folds
2023-11-26 11:14:20,583:INFO:Declaring metric variables
2023-11-26 11:14:20,585:INFO:Importing untrained model
2023-11-26 11:14:20,589:INFO:Decision Tree Classifier Imported successfully
2023-11-26 11:14:20,595:INFO:Starting cross validation
2023-11-26 11:14:20,596:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:20,693:INFO:Calculating mean and std
2023-11-26 11:14:20,694:INFO:Creating metrics dataframe
2023-11-26 11:14:20,697:INFO:Uploading results into container
2023-11-26 11:14:20,698:INFO:Uploading model into container now
2023-11-26 11:14:20,698:INFO:_master_model_container: 4
2023-11-26 11:14:20,698:INFO:_display_container: 2
2023-11-26 11:14:20,699:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=123, splitter='best')
2023-11-26 11:14:20,699:INFO:create_model() successfully completed......................................
2023-11-26 11:14:20,845:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:20,845:INFO:Creating metrics dataframe
2023-11-26 11:14:20,854:INFO:Initializing SVM - Linear Kernel
2023-11-26 11:14:20,854:INFO:Total runtime is 0.3404598633448283 minutes
2023-11-26 11:14:20,857:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:20,857:INFO:Initializing create_model()
2023-11-26 11:14:20,857:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:20,858:INFO:Checking exceptions
2023-11-26 11:14:20,858:INFO:Importing libraries
2023-11-26 11:14:20,858:INFO:Copying training dataset
2023-11-26 11:14:20,863:INFO:Defining folds
2023-11-26 11:14:20,863:INFO:Declaring metric variables
2023-11-26 11:14:20,866:INFO:Importing untrained model
2023-11-26 11:14:20,869:INFO:SVM - Linear Kernel Imported successfully
2023-11-26 11:14:20,875:INFO:Starting cross validation
2023-11-26 11:14:20,876:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:20,981:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-26 11:14:20,981:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-26 11:14:20,981:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-26 11:14:20,981:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-26 11:14:20,985:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-26 11:14:20,991:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-26 11:14:20,991:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-26 11:14:20,994:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-11-26 11:14:21,002:INFO:Calculating mean and std
2023-11-26 11:14:21,002:INFO:Creating metrics dataframe
2023-11-26 11:14:21,005:INFO:Uploading results into container
2023-11-26 11:14:21,006:INFO:Uploading model into container now
2023-11-26 11:14:21,006:INFO:_master_model_container: 5
2023-11-26 11:14:21,006:INFO:_display_container: 2
2023-11-26 11:14:21,007:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-11-26 11:14:21,007:INFO:create_model() successfully completed......................................
2023-11-26 11:14:21,150:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:21,150:INFO:Creating metrics dataframe
2023-11-26 11:14:21,159:INFO:Initializing Ridge Classifier
2023-11-26 11:14:21,159:INFO:Total runtime is 0.34555151462554934 minutes
2023-11-26 11:14:21,162:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:21,162:INFO:Initializing create_model()
2023-11-26 11:14:21,162:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:21,162:INFO:Checking exceptions
2023-11-26 11:14:21,162:INFO:Importing libraries
2023-11-26 11:14:21,162:INFO:Copying training dataset
2023-11-26 11:14:21,168:INFO:Defining folds
2023-11-26 11:14:21,168:INFO:Declaring metric variables
2023-11-26 11:14:21,171:INFO:Importing untrained model
2023-11-26 11:14:21,174:INFO:Ridge Classifier Imported successfully
2023-11-26 11:14:21,180:INFO:Starting cross validation
2023-11-26 11:14:21,181:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:21,292:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.77267e-11): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-11-26 11:14:21,292:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.79192e-11): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-11-26 11:14:21,292:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.75763e-11): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-11-26 11:14:21,292:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.79306e-11): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-11-26 11:14:21,293:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.78501e-11): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-11-26 11:14:21,293:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.76745e-11): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-11-26 11:14:21,293:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.76603e-11): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-11-26 11:14:21,293:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.78387e-11): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-11-26 11:14:21,293:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.75884e-11): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-11-26 11:14:21,293:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_ridge.py:216: LinAlgWarning: Ill-conditioned matrix (rcond=2.77499e-11): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2023-11-26 11:14:21,300:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-26 11:14:21,300:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-26 11:14:21,300:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-26 11:14:21,300:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-26 11:14:21,300:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-26 11:14:21,302:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-26 11:14:21,302:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-26 11:14:21,303:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-26 11:14:21,303:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-26 11:14:21,303:WARNING:C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\benny\AppData\Roaming\Python\Python310\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-11-26 11:14:21,315:INFO:Calculating mean and std
2023-11-26 11:14:21,316:INFO:Creating metrics dataframe
2023-11-26 11:14:21,319:INFO:Uploading results into container
2023-11-26 11:14:21,319:INFO:Uploading model into container now
2023-11-26 11:14:21,320:INFO:_master_model_container: 6
2023-11-26 11:14:21,320:INFO:_display_container: 2
2023-11-26 11:14:21,320:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2023-11-26 11:14:21,320:INFO:create_model() successfully completed......................................
2023-11-26 11:14:21,465:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:21,465:INFO:Creating metrics dataframe
2023-11-26 11:14:21,475:INFO:Initializing Random Forest Classifier
2023-11-26 11:14:21,475:INFO:Total runtime is 0.35081470807393395 minutes
2023-11-26 11:14:21,478:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:21,478:INFO:Initializing create_model()
2023-11-26 11:14:21,478:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:21,478:INFO:Checking exceptions
2023-11-26 11:14:21,478:INFO:Importing libraries
2023-11-26 11:14:21,478:INFO:Copying training dataset
2023-11-26 11:14:21,484:INFO:Defining folds
2023-11-26 11:14:21,484:INFO:Declaring metric variables
2023-11-26 11:14:21,487:INFO:Importing untrained model
2023-11-26 11:14:21,490:INFO:Random Forest Classifier Imported successfully
2023-11-26 11:14:21,495:INFO:Starting cross validation
2023-11-26 11:14:21,496:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:22,228:INFO:Calculating mean and std
2023-11-26 11:14:22,229:INFO:Creating metrics dataframe
2023-11-26 11:14:22,232:INFO:Uploading results into container
2023-11-26 11:14:22,233:INFO:Uploading model into container now
2023-11-26 11:14:22,233:INFO:_master_model_container: 7
2023-11-26 11:14:22,233:INFO:_display_container: 2
2023-11-26 11:14:22,233:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2023-11-26 11:14:22,233:INFO:create_model() successfully completed......................................
2023-11-26 11:14:22,380:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:22,381:INFO:Creating metrics dataframe
2023-11-26 11:14:22,391:INFO:Initializing Quadratic Discriminant Analysis
2023-11-26 11:14:22,391:INFO:Total runtime is 0.3660813728968303 minutes
2023-11-26 11:14:22,393:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:22,394:INFO:Initializing create_model()
2023-11-26 11:14:22,394:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:22,394:INFO:Checking exceptions
2023-11-26 11:14:22,394:INFO:Importing libraries
2023-11-26 11:14:22,394:INFO:Copying training dataset
2023-11-26 11:14:22,400:INFO:Defining folds
2023-11-26 11:14:22,400:INFO:Declaring metric variables
2023-11-26 11:14:22,402:INFO:Importing untrained model
2023-11-26 11:14:22,406:INFO:Quadratic Discriminant Analysis Imported successfully
2023-11-26 11:14:22,412:INFO:Starting cross validation
2023-11-26 11:14:22,412:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:22,478:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-26 11:14:22,478:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-26 11:14:22,479:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-26 11:14:22,479:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-26 11:14:22,479:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-26 11:14:22,479:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-26 11:14:22,479:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-26 11:14:22,479:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-11-26 11:14:22,506:INFO:Calculating mean and std
2023-11-26 11:14:22,507:INFO:Creating metrics dataframe
2023-11-26 11:14:22,509:INFO:Uploading results into container
2023-11-26 11:14:22,510:INFO:Uploading model into container now
2023-11-26 11:14:22,510:INFO:_master_model_container: 8
2023-11-26 11:14:22,510:INFO:_display_container: 2
2023-11-26 11:14:22,510:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-11-26 11:14:22,510:INFO:create_model() successfully completed......................................
2023-11-26 11:14:22,657:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:22,657:INFO:Creating metrics dataframe
2023-11-26 11:14:22,667:INFO:Initializing Ada Boost Classifier
2023-11-26 11:14:22,667:INFO:Total runtime is 0.3706898411115011 minutes
2023-11-26 11:14:22,670:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:22,670:INFO:Initializing create_model()
2023-11-26 11:14:22,670:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:22,670:INFO:Checking exceptions
2023-11-26 11:14:22,671:INFO:Importing libraries
2023-11-26 11:14:22,671:INFO:Copying training dataset
2023-11-26 11:14:22,676:INFO:Defining folds
2023-11-26 11:14:22,676:INFO:Declaring metric variables
2023-11-26 11:14:22,679:INFO:Importing untrained model
2023-11-26 11:14:22,682:INFO:Ada Boost Classifier Imported successfully
2023-11-26 11:14:22,687:INFO:Starting cross validation
2023-11-26 11:14:22,688:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:23,017:INFO:Calculating mean and std
2023-11-26 11:14:23,018:INFO:Creating metrics dataframe
2023-11-26 11:14:23,020:INFO:Uploading results into container
2023-11-26 11:14:23,021:INFO:Uploading model into container now
2023-11-26 11:14:23,021:INFO:_master_model_container: 9
2023-11-26 11:14:23,021:INFO:_display_container: 2
2023-11-26 11:14:23,022:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=123)
2023-11-26 11:14:23,022:INFO:create_model() successfully completed......................................
2023-11-26 11:14:23,168:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:23,168:INFO:Creating metrics dataframe
2023-11-26 11:14:23,177:INFO:Initializing Gradient Boosting Classifier
2023-11-26 11:14:23,177:INFO:Total runtime is 0.37918982505798343 minutes
2023-11-26 11:14:23,180:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:23,180:INFO:Initializing create_model()
2023-11-26 11:14:23,180:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:23,181:INFO:Checking exceptions
2023-11-26 11:14:23,181:INFO:Importing libraries
2023-11-26 11:14:23,181:INFO:Copying training dataset
2023-11-26 11:14:23,189:INFO:Defining folds
2023-11-26 11:14:23,189:INFO:Declaring metric variables
2023-11-26 11:14:23,193:INFO:Importing untrained model
2023-11-26 11:14:23,198:INFO:Gradient Boosting Classifier Imported successfully
2023-11-26 11:14:23,205:INFO:Starting cross validation
2023-11-26 11:14:23,206:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:24,119:INFO:Calculating mean and std
2023-11-26 11:14:24,120:INFO:Creating metrics dataframe
2023-11-26 11:14:24,123:INFO:Uploading results into container
2023-11-26 11:14:24,124:INFO:Uploading model into container now
2023-11-26 11:14:24,124:INFO:_master_model_container: 10
2023-11-26 11:14:24,124:INFO:_display_container: 2
2023-11-26 11:14:24,125:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-11-26 11:14:24,125:INFO:create_model() successfully completed......................................
2023-11-26 11:14:24,270:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:24,270:INFO:Creating metrics dataframe
2023-11-26 11:14:24,281:INFO:Initializing Linear Discriminant Analysis
2023-11-26 11:14:24,281:INFO:Total runtime is 0.3975808779398601 minutes
2023-11-26 11:14:24,286:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:24,287:INFO:Initializing create_model()
2023-11-26 11:14:24,287:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:24,287:INFO:Checking exceptions
2023-11-26 11:14:24,287:INFO:Importing libraries
2023-11-26 11:14:24,287:INFO:Copying training dataset
2023-11-26 11:14:24,296:INFO:Defining folds
2023-11-26 11:14:24,297:INFO:Declaring metric variables
2023-11-26 11:14:24,302:INFO:Importing untrained model
2023-11-26 11:14:24,307:INFO:Linear Discriminant Analysis Imported successfully
2023-11-26 11:14:24,314:INFO:Starting cross validation
2023-11-26 11:14:24,315:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:24,422:INFO:Calculating mean and std
2023-11-26 11:14:24,423:INFO:Creating metrics dataframe
2023-11-26 11:14:24,426:INFO:Uploading results into container
2023-11-26 11:14:24,427:INFO:Uploading model into container now
2023-11-26 11:14:24,427:INFO:_master_model_container: 11
2023-11-26 11:14:24,427:INFO:_display_container: 2
2023-11-26 11:14:24,427:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-11-26 11:14:24,427:INFO:create_model() successfully completed......................................
2023-11-26 11:14:24,582:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:24,583:INFO:Creating metrics dataframe
2023-11-26 11:14:24,594:INFO:Initializing Extra Trees Classifier
2023-11-26 11:14:24,594:INFO:Total runtime is 0.40279753208160407 minutes
2023-11-26 11:14:24,597:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:24,597:INFO:Initializing create_model()
2023-11-26 11:14:24,597:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:24,597:INFO:Checking exceptions
2023-11-26 11:14:24,597:INFO:Importing libraries
2023-11-26 11:14:24,597:INFO:Copying training dataset
2023-11-26 11:14:24,603:INFO:Defining folds
2023-11-26 11:14:24,603:INFO:Declaring metric variables
2023-11-26 11:14:24,606:INFO:Importing untrained model
2023-11-26 11:14:24,610:INFO:Extra Trees Classifier Imported successfully
2023-11-26 11:14:24,615:INFO:Starting cross validation
2023-11-26 11:14:24,616:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:25,251:INFO:Calculating mean and std
2023-11-26 11:14:25,252:INFO:Creating metrics dataframe
2023-11-26 11:14:25,255:INFO:Uploading results into container
2023-11-26 11:14:25,255:INFO:Uploading model into container now
2023-11-26 11:14:25,256:INFO:_master_model_container: 12
2023-11-26 11:14:25,256:INFO:_display_container: 2
2023-11-26 11:14:25,256:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=123, verbose=0, warm_start=False)
2023-11-26 11:14:25,257:INFO:create_model() successfully completed......................................
2023-11-26 11:14:25,407:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:25,407:INFO:Creating metrics dataframe
2023-11-26 11:14:25,418:INFO:Initializing Extreme Gradient Boosting
2023-11-26 11:14:25,418:INFO:Total runtime is 0.4165316303571066 minutes
2023-11-26 11:14:25,420:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:25,421:INFO:Initializing create_model()
2023-11-26 11:14:25,421:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:25,421:INFO:Checking exceptions
2023-11-26 11:14:25,421:INFO:Importing libraries
2023-11-26 11:14:25,421:INFO:Copying training dataset
2023-11-26 11:14:25,427:INFO:Defining folds
2023-11-26 11:14:25,427:INFO:Declaring metric variables
2023-11-26 11:14:25,430:INFO:Importing untrained model
2023-11-26 11:14:25,433:INFO:Extreme Gradient Boosting Imported successfully
2023-11-26 11:14:25,439:INFO:Starting cross validation
2023-11-26 11:14:25,440:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:25,944:INFO:Calculating mean and std
2023-11-26 11:14:25,945:INFO:Creating metrics dataframe
2023-11-26 11:14:25,947:INFO:Uploading results into container
2023-11-26 11:14:25,948:INFO:Uploading model into container now
2023-11-26 11:14:25,948:INFO:_master_model_container: 13
2023-11-26 11:14:25,948:INFO:_display_container: 2
2023-11-26 11:14:25,949:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2023-11-26 11:14:25,949:INFO:create_model() successfully completed......................................
2023-11-26 11:14:26,094:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:26,094:INFO:Creating metrics dataframe
2023-11-26 11:14:26,105:INFO:Initializing Light Gradient Boosting Machine
2023-11-26 11:14:26,105:INFO:Total runtime is 0.4279892245928447 minutes
2023-11-26 11:14:26,108:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:26,108:INFO:Initializing create_model()
2023-11-26 11:14:26,109:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:26,109:INFO:Checking exceptions
2023-11-26 11:14:26,109:INFO:Importing libraries
2023-11-26 11:14:26,109:INFO:Copying training dataset
2023-11-26 11:14:26,114:INFO:Defining folds
2023-11-26 11:14:26,114:INFO:Declaring metric variables
2023-11-26 11:14:26,117:INFO:Importing untrained model
2023-11-26 11:14:26,120:INFO:Light Gradient Boosting Machine Imported successfully
2023-11-26 11:14:26,125:INFO:Starting cross validation
2023-11-26 11:14:26,126:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:27,083:INFO:Calculating mean and std
2023-11-26 11:14:27,086:INFO:Creating metrics dataframe
2023-11-26 11:14:27,092:INFO:Uploading results into container
2023-11-26 11:14:27,093:INFO:Uploading model into container now
2023-11-26 11:14:27,094:INFO:_master_model_container: 14
2023-11-26 11:14:27,094:INFO:_display_container: 2
2023-11-26 11:14:27,095:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2023-11-26 11:14:27,095:INFO:create_model() successfully completed......................................
2023-11-26 11:14:27,295:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:27,295:INFO:Creating metrics dataframe
2023-11-26 11:14:27,306:INFO:Initializing CatBoost Classifier
2023-11-26 11:14:27,306:INFO:Total runtime is 0.44799803495407114 minutes
2023-11-26 11:14:27,309:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:27,309:INFO:Initializing create_model()
2023-11-26 11:14:27,309:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=catboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:27,309:INFO:Checking exceptions
2023-11-26 11:14:27,309:INFO:Importing libraries
2023-11-26 11:14:27,309:INFO:Copying training dataset
2023-11-26 11:14:27,315:INFO:Defining folds
2023-11-26 11:14:27,315:INFO:Declaring metric variables
2023-11-26 11:14:27,318:INFO:Importing untrained model
2023-11-26 11:14:27,321:INFO:CatBoost Classifier Imported successfully
2023-11-26 11:14:27,327:INFO:Starting cross validation
2023-11-26 11:14:27,328:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:46,870:INFO:Calculating mean and std
2023-11-26 11:14:46,871:INFO:Creating metrics dataframe
2023-11-26 11:14:46,874:INFO:Uploading results into container
2023-11-26 11:14:46,874:INFO:Uploading model into container now
2023-11-26 11:14:46,875:INFO:_master_model_container: 15
2023-11-26 11:14:46,875:INFO:_display_container: 2
2023-11-26 11:14:46,875:INFO:<catboost.core.CatBoostClassifier object at 0x0000027C267D3AC0>
2023-11-26 11:14:46,875:INFO:create_model() successfully completed......................................
2023-11-26 11:14:47,024:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:47,024:INFO:Creating metrics dataframe
2023-11-26 11:14:47,037:INFO:Initializing Dummy Classifier
2023-11-26 11:14:47,037:INFO:Total runtime is 0.7768439094225567 minutes
2023-11-26 11:14:47,040:INFO:SubProcess create_model() called ==================================
2023-11-26 11:14:47,040:INFO:Initializing create_model()
2023-11-26 11:14:47,040:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C0EA4D780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:47,040:INFO:Checking exceptions
2023-11-26 11:14:47,040:INFO:Importing libraries
2023-11-26 11:14:47,040:INFO:Copying training dataset
2023-11-26 11:14:47,046:INFO:Defining folds
2023-11-26 11:14:47,046:INFO:Declaring metric variables
2023-11-26 11:14:47,049:INFO:Importing untrained model
2023-11-26 11:14:47,052:INFO:Dummy Classifier Imported successfully
2023-11-26 11:14:47,058:INFO:Starting cross validation
2023-11-26 11:14:47,059:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:14:47,110:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-26 11:14:47,110:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-26 11:14:47,110:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-26 11:14:47,110:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-26 11:14:47,113:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-26 11:14:47,114:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-26 11:14:47,119:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-26 11:14:47,119:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-26 11:14:47,120:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-26 11:14:47,122:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-11-26 11:14:47,126:INFO:Calculating mean and std
2023-11-26 11:14:47,127:INFO:Creating metrics dataframe
2023-11-26 11:14:47,129:INFO:Uploading results into container
2023-11-26 11:14:47,130:INFO:Uploading model into container now
2023-11-26 11:14:47,130:INFO:_master_model_container: 16
2023-11-26 11:14:47,130:INFO:_display_container: 2
2023-11-26 11:14:47,130:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2023-11-26 11:14:47,130:INFO:create_model() successfully completed......................................
2023-11-26 11:14:47,272:INFO:SubProcess create_model() end ==================================
2023-11-26 11:14:47,272:INFO:Creating metrics dataframe
2023-11-26 11:14:47,291:INFO:Initializing create_model()
2023-11-26 11:14:47,291:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:14:47,291:INFO:Checking exceptions
2023-11-26 11:14:47,292:INFO:Importing libraries
2023-11-26 11:14:47,293:INFO:Copying training dataset
2023-11-26 11:14:47,298:INFO:Defining folds
2023-11-26 11:14:47,298:INFO:Declaring metric variables
2023-11-26 11:14:47,298:INFO:Importing untrained model
2023-11-26 11:14:47,298:INFO:Declaring custom model
2023-11-26 11:14:47,299:INFO:Gradient Boosting Classifier Imported successfully
2023-11-26 11:14:47,299:INFO:Cross validation set to False
2023-11-26 11:14:47,299:INFO:Fitting Model
2023-11-26 11:14:48,041:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-11-26 11:14:48,041:INFO:create_model() successfully completed......................................
2023-11-26 11:14:48,215:INFO:_master_model_container: 16
2023-11-26 11:14:48,215:INFO:_display_container: 2
2023-11-26 11:14:48,215:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-11-26 11:14:48,215:INFO:compare_models() successfully completed......................................
2023-11-26 11:21:06,794:INFO:Initializing create_model()
2023-11-26 11:21:06,794:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=gbc, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:21:06,794:INFO:Checking exceptions
2023-11-26 11:21:06,811:INFO:Importing libraries
2023-11-26 11:21:06,811:INFO:Copying training dataset
2023-11-26 11:21:06,817:INFO:Defining folds
2023-11-26 11:21:06,817:INFO:Declaring metric variables
2023-11-26 11:21:06,820:INFO:Importing untrained model
2023-11-26 11:21:06,823:INFO:Gradient Boosting Classifier Imported successfully
2023-11-26 11:21:06,829:INFO:Starting cross validation
2023-11-26 11:21:06,830:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:21:12,284:INFO:Calculating mean and std
2023-11-26 11:21:12,286:INFO:Creating metrics dataframe
2023-11-26 11:21:12,296:INFO:Finalizing model
2023-11-26 11:21:13,042:INFO:Uploading results into container
2023-11-26 11:21:13,043:INFO:Uploading model into container now
2023-11-26 11:21:13,052:INFO:_master_model_container: 17
2023-11-26 11:21:13,052:INFO:_display_container: 3
2023-11-26 11:21:13,052:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-11-26 11:21:13,052:INFO:create_model() successfully completed......................................
2023-11-26 11:21:13,217:INFO:Initializing create_model()
2023-11-26 11:21:13,217:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:21:13,217:INFO:Checking exceptions
2023-11-26 11:21:13,232:INFO:Importing libraries
2023-11-26 11:21:13,232:INFO:Copying training dataset
2023-11-26 11:21:13,238:INFO:Defining folds
2023-11-26 11:21:13,238:INFO:Declaring metric variables
2023-11-26 11:21:13,241:INFO:Importing untrained model
2023-11-26 11:21:13,244:INFO:Logistic Regression Imported successfully
2023-11-26 11:21:13,251:INFO:Starting cross validation
2023-11-26 11:21:13,253:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:21:16,070:INFO:Calculating mean and std
2023-11-26 11:21:16,071:INFO:Creating metrics dataframe
2023-11-26 11:21:16,077:INFO:Finalizing model
2023-11-26 11:21:16,203:INFO:Uploading results into container
2023-11-26 11:21:16,204:INFO:Uploading model into container now
2023-11-26 11:21:16,215:INFO:_master_model_container: 18
2023-11-26 11:21:16,215:INFO:_display_container: 4
2023-11-26 11:21:16,216:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-11-26 11:21:16,216:INFO:create_model() successfully completed......................................
2023-11-26 11:21:16,394:INFO:Initializing create_model()
2023-11-26 11:21:16,394:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=xgboost, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:21:16,395:INFO:Checking exceptions
2023-11-26 11:21:16,410:INFO:Importing libraries
2023-11-26 11:21:16,410:INFO:Copying training dataset
2023-11-26 11:21:16,416:INFO:Defining folds
2023-11-26 11:21:16,416:INFO:Declaring metric variables
2023-11-26 11:21:16,419:INFO:Importing untrained model
2023-11-26 11:21:16,422:INFO:Extreme Gradient Boosting Imported successfully
2023-11-26 11:21:16,432:INFO:Starting cross validation
2023-11-26 11:21:16,433:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:21:16,837:INFO:Calculating mean and std
2023-11-26 11:21:16,837:INFO:Creating metrics dataframe
2023-11-26 11:21:16,841:INFO:Finalizing model
2023-11-26 11:21:17,028:INFO:Uploading results into container
2023-11-26 11:21:17,029:INFO:Uploading model into container now
2023-11-26 11:21:17,046:INFO:_master_model_container: 19
2023-11-26 11:21:17,046:INFO:_display_container: 5
2023-11-26 11:21:17,049:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2023-11-26 11:21:17,049:INFO:create_model() successfully completed......................................
2023-11-26 11:21:17,227:INFO:Initializing create_model()
2023-11-26 11:21:17,228:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=nb, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:21:17,228:INFO:Checking exceptions
2023-11-26 11:21:17,241:INFO:Importing libraries
2023-11-26 11:21:17,242:INFO:Copying training dataset
2023-11-26 11:21:17,248:INFO:Defining folds
2023-11-26 11:21:17,248:INFO:Declaring metric variables
2023-11-26 11:21:17,251:INFO:Importing untrained model
2023-11-26 11:21:17,254:INFO:Naive Bayes Imported successfully
2023-11-26 11:21:17,260:INFO:Starting cross validation
2023-11-26 11:21:17,262:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:21:17,337:INFO:Calculating mean and std
2023-11-26 11:21:17,337:INFO:Creating metrics dataframe
2023-11-26 11:21:17,342:INFO:Finalizing model
2023-11-26 11:21:17,359:INFO:Uploading results into container
2023-11-26 11:21:17,360:INFO:Uploading model into container now
2023-11-26 11:21:17,368:INFO:_master_model_container: 20
2023-11-26 11:21:17,369:INFO:_display_container: 6
2023-11-26 11:21:17,369:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-11-26 11:21:17,369:INFO:create_model() successfully completed......................................
2023-11-26 11:21:17,517:INFO:Initializing create_model()
2023-11-26 11:21:17,517:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=ada, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:21:17,517:INFO:Checking exceptions
2023-11-26 11:21:17,532:INFO:Importing libraries
2023-11-26 11:21:17,532:INFO:Copying training dataset
2023-11-26 11:21:17,538:INFO:Defining folds
2023-11-26 11:21:17,538:INFO:Declaring metric variables
2023-11-26 11:21:17,541:INFO:Importing untrained model
2023-11-26 11:21:17,547:INFO:Ada Boost Classifier Imported successfully
2023-11-26 11:21:17,557:INFO:Starting cross validation
2023-11-26 11:21:17,558:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:21:17,916:INFO:Calculating mean and std
2023-11-26 11:21:17,916:INFO:Creating metrics dataframe
2023-11-26 11:21:17,921:INFO:Finalizing model
2023-11-26 11:21:18,132:INFO:Uploading results into container
2023-11-26 11:21:18,132:INFO:Uploading model into container now
2023-11-26 11:21:18,140:INFO:_master_model_container: 21
2023-11-26 11:21:18,141:INFO:_display_container: 7
2023-11-26 11:21:18,141:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=123)
2023-11-26 11:21:18,141:INFO:create_model() successfully completed......................................
2023-11-26 11:21:18,299:INFO:Initializing blend_models()
2023-11-26 11:21:18,300:INFO:blend_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator_list=[GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), GaussianNB(priors=None, var_smoothing=1e-09), AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=123)], fold=None, round=4, choose_better=False, optimize=Accuracy, method=auto, weights=None, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2023-11-26 11:21:18,300:INFO:Checking exceptions
2023-11-26 11:21:18,317:INFO:Importing libraries
2023-11-26 11:21:18,317:INFO:Copying training dataset
2023-11-26 11:21:18,320:INFO:Getting model names
2023-11-26 11:21:18,324:INFO:SubProcess create_model() called ==================================
2023-11-26 11:21:18,330:INFO:Initializing create_model()
2023-11-26 11:21:18,330:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            n_estimators=None, n_jobs=-1,
                                            num_parallel_tree=None,
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C1EA5C3D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:21:18,331:INFO:Checking exceptions
2023-11-26 11:21:18,331:INFO:Importing libraries
2023-11-26 11:21:18,331:INFO:Copying training dataset
2023-11-26 11:21:18,336:INFO:Defining folds
2023-11-26 11:21:18,336:INFO:Declaring metric variables
2023-11-26 11:21:18,339:INFO:Importing untrained model
2023-11-26 11:21:18,339:INFO:Declaring custom model
2023-11-26 11:21:18,344:INFO:Voting Classifier Imported successfully
2023-11-26 11:21:18,352:INFO:Starting cross validation
2023-11-26 11:21:18,352:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:21:19,868:INFO:Calculating mean and std
2023-11-26 11:21:19,869:INFO:Creating metrics dataframe
2023-11-26 11:21:19,873:INFO:Finalizing model
2023-11-26 11:21:20,674:INFO:Uploading results into container
2023-11-26 11:21:20,675:INFO:Uploading model into container now
2023-11-26 11:21:20,675:INFO:_master_model_container: 22
2023-11-26 11:21:20,675:INFO:_display_container: 8
2023-11-26 11:21:20,681:INFO:VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            n_estimators=None, n_jobs=-1,
                                            num_parallel_tree=None,
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2023-11-26 11:21:20,682:INFO:create_model() successfully completed......................................
2023-11-26 11:21:20,831:INFO:SubProcess create_model() end ==================================
2023-11-26 11:21:20,839:INFO:_master_model_container: 22
2023-11-26 11:21:20,839:INFO:_display_container: 8
2023-11-26 11:21:20,845:INFO:VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            n_estimators=None, n_jobs=-1,
                                            num_parallel_tree=None,
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2023-11-26 11:21:20,845:INFO:blend_models() successfully completed......................................
2023-11-26 11:21:20,998:INFO:Initializing tune_model()
2023-11-26 11:21:20,998:INFO:tune_model(estimator=VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            n_estimators=None, n_jobs=-1,
                                            num_parallel_tree=None,
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>)
2023-11-26 11:21:20,998:INFO:Checking exceptions
2023-11-26 11:21:21,015:INFO:Copying training dataset
2023-11-26 11:21:21,019:INFO:Checking base model
2023-11-26 11:21:21,019:INFO:Base model : Voting Classifier
2023-11-26 11:21:21,019:INFO:Model has a special tunable class, using that
2023-11-26 11:21:21,024:INFO:Declaring metric variables
2023-11-26 11:21:21,026:INFO:Defining Hyperparameters
2023-11-26 11:21:21,180:INFO:Tuning with n_jobs=-1
2023-11-26 11:21:21,180:INFO:Initializing RandomizedSearchCV
2023-11-26 11:21:33,145:INFO:best_params: {'actual_estimator__weight_4': 0.33, 'actual_estimator__weight_3': 0.06999999999999999, 'actual_estimator__weight_2': 0.52, 'actual_estimator__weight_1': 0.64, 'actual_estimator__weight_0': 0.63}
2023-11-26 11:21:33,145:INFO:Hyperparameter search completed
2023-11-26 11:21:33,145:INFO:Getting base sklearn object from tunable
2023-11-26 11:21:33,188:INFO:SubProcess create_model() called ==================================
2023-11-26 11:21:33,195:INFO:Initializing create_model()
2023-11-26 11:21:33,195:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft',
                 weights=[0.63, 0.64, 0.52, 0.06999999999999999, 0.33]), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000027C20336770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'estimators': [('Gradient Boosting Classifier', GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)), ('Logistic Regression', LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)), ('Extreme Gradient Boosting', XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)), ('Naive Bayes', GaussianNB(priors=None, var_smoothing=1e-09)), ('Ada Boost Classifier', AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=123))], 'flatten_transform': True, 'n_jobs': -1, 'voting': 'soft', 'weights': [0.63, 0.64, 0.52, 0.06999999999999999, 0.33]})
2023-11-26 11:21:33,195:INFO:Checking exceptions
2023-11-26 11:21:33,195:INFO:Importing libraries
2023-11-26 11:21:33,195:INFO:Copying training dataset
2023-11-26 11:21:33,200:INFO:Defining folds
2023-11-26 11:21:33,200:INFO:Declaring metric variables
2023-11-26 11:21:33,203:INFO:Importing untrained model
2023-11-26 11:21:33,203:INFO:Declaring custom model
2023-11-26 11:21:33,208:INFO:Voting Classifier Imported successfully
2023-11-26 11:21:33,214:INFO:Starting cross validation
2023-11-26 11:21:33,215:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:21:34,729:INFO:Calculating mean and std
2023-11-26 11:21:34,730:INFO:Creating metrics dataframe
2023-11-26 11:21:34,735:INFO:Finalizing model
2023-11-26 11:21:35,524:INFO:Uploading results into container
2023-11-26 11:21:35,524:INFO:Uploading model into container now
2023-11-26 11:21:35,525:INFO:_master_model_container: 23
2023-11-26 11:21:35,525:INFO:_display_container: 9
2023-11-26 11:21:35,531:INFO:VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft',
                 weights=[0.63, 0.64, 0.52, 0.06999999999999999, 0.33])
2023-11-26 11:21:35,531:INFO:create_model() successfully completed......................................
2023-11-26 11:21:35,678:INFO:SubProcess create_model() end ==================================
2023-11-26 11:21:35,678:INFO:choose_better activated
2023-11-26 11:21:35,682:INFO:SubProcess create_model() called ==================================
2023-11-26 11:21:35,688:INFO:Initializing create_model()
2023-11-26 11:21:35,688:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, estimator=VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            n_estimators=None, n_jobs=-1,
                                            num_parallel_tree=None,
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-11-26 11:21:35,688:INFO:Checking exceptions
2023-11-26 11:21:35,689:INFO:Importing libraries
2023-11-26 11:21:35,689:INFO:Copying training dataset
2023-11-26 11:21:35,694:INFO:Defining folds
2023-11-26 11:21:35,695:INFO:Declaring metric variables
2023-11-26 11:21:35,695:INFO:Importing untrained model
2023-11-26 11:21:35,695:INFO:Declaring custom model
2023-11-26 11:21:35,697:INFO:Voting Classifier Imported successfully
2023-11-26 11:21:35,697:INFO:Starting cross validation
2023-11-26 11:21:35,698:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-11-26 11:21:37,136:INFO:Calculating mean and std
2023-11-26 11:21:37,137:INFO:Creating metrics dataframe
2023-11-26 11:21:37,138:INFO:Finalizing model
2023-11-26 11:21:37,929:INFO:Uploading results into container
2023-11-26 11:21:37,930:INFO:Uploading model into container now
2023-11-26 11:21:37,930:INFO:_master_model_container: 24
2023-11-26 11:21:37,930:INFO:_display_container: 10
2023-11-26 11:21:37,936:INFO:VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            n_estimators=None, n_jobs=-1,
                                            num_parallel_tree=None,
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2023-11-26 11:21:37,936:INFO:create_model() successfully completed......................................
2023-11-26 11:21:38,082:INFO:SubProcess create_model() end ==================================
2023-11-26 11:21:38,088:INFO:VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            n_estimators=None, n_jobs=-1,
                                            num_parallel_tree=None,
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None) result for Accuracy is 0.7824
2023-11-26 11:21:38,094:INFO:VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft',
                 weights=[0.63, 0.64, 0.52, 0.06999999999999999, 0.33]) result for Accuracy is 0.8016
2023-11-26 11:21:38,100:INFO:VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft',
                 weights=[0.63, 0.64, 0.52, 0.06999999999999999, 0.33]) is best model
2023-11-26 11:21:38,100:INFO:choose_better completed
2023-11-26 11:21:38,108:INFO:_master_model_container: 24
2023-11-26 11:21:38,108:INFO:_display_container: 9
2023-11-26 11:21:38,114:INFO:VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft',
                 weights=[0.63, 0.64, 0.52, 0.06999999999999999, 0.33])
2023-11-26 11:21:38,114:INFO:tune_model() successfully completed......................................
2023-11-26 11:21:55,771:INFO:Initializing plot_model()
2023-11-26 11:21:55,771:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft',
                 weights=[0.63, 0.64, 0.52, 0.06999999999999999, 0.33]), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, system=True)
2023-11-26 11:21:55,771:INFO:Checking exceptions
2023-11-26 11:21:55,776:INFO:Preloading libraries
2023-11-26 11:21:55,801:INFO:Copying training dataset
2023-11-26 11:21:55,801:INFO:Plot type: auc
2023-11-26 11:21:55,929:INFO:Fitting Model
2023-11-26 11:21:55,939:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but GradientBoostingClassifier was fitted with feature names
  warnings.warn(

2023-11-26 11:21:55,939:INFO:Scoring test/hold-out set
2023-11-26 11:21:56,284:INFO:Visual Rendered Successfully
2023-11-26 11:21:56,434:INFO:plot_model() successfully completed......................................
2023-11-26 11:22:07,467:INFO:Initializing plot_model()
2023-11-26 11:22:07,467:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft',
                 weights=[0.63, 0.64, 0.52, 0.06999999999999999, 0.33]), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, system=True)
2023-11-26 11:22:07,467:INFO:Checking exceptions
2023-11-26 11:22:07,471:INFO:Preloading libraries
2023-11-26 11:22:07,495:INFO:Copying training dataset
2023-11-26 11:22:07,495:INFO:Plot type: confusion_matrix
2023-11-26 11:22:07,629:INFO:Fitting Model
2023-11-26 11:22:07,630:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\base.py:439: UserWarning: X does not have valid feature names, but GradientBoostingClassifier was fitted with feature names
  warnings.warn(

2023-11-26 11:22:07,630:INFO:Scoring test/hold-out set
2023-11-26 11:22:07,881:INFO:Visual Rendered Successfully
2023-11-26 11:22:08,033:INFO:plot_model() successfully completed......................................
2023-11-26 11:22:13,894:INFO:Initializing plot_model()
2023-11-26 11:22:13,894:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft',
                 weights=[0.63, 0.64, 0.52, 0.06999999999999999, 0.33]), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, system=True)
2023-11-26 11:22:13,894:INFO:Checking exceptions
2023-11-26 11:22:30,614:INFO:Initializing plot_model()
2023-11-26 11:22:30,614:INFO:plot_model(plot=learning, fold=None, verbose=True, display=None, display_format=None, estimator=VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft',
                 weights=[0.63, 0.64, 0.52, 0.06999999999999999, 0.33]), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, system=True)
2023-11-26 11:22:30,614:INFO:Checking exceptions
2023-11-26 11:22:30,618:INFO:Preloading libraries
2023-11-26 11:22:30,642:INFO:Copying training dataset
2023-11-26 11:22:30,642:INFO:Plot type: learning
2023-11-26 11:22:30,775:INFO:Fitting Model
2023-11-26 11:22:40,272:INFO:Visual Rendered Successfully
2023-11-26 11:22:40,451:INFO:plot_model() successfully completed......................................
2023-11-26 11:22:50,694:INFO:Initializing plot_model()
2023-11-26 11:22:50,694:INFO:plot_model(plot=boundary, fold=None, verbose=True, display=None, display_format=None, estimator=VotingClassifier(estimators=[('Gradient Boosting Classifier',
                              GradientBoostingClassifier(ccp_alpha=0.0,
                                                         criterion='friedman_mse',
                                                         init=None,
                                                         learning_rate=0.1,
                                                         loss='log_loss',
                                                         max_depth=3,
                                                         max_features=None,
                                                         max_leaf_nodes=None,
                                                         min_impurity_decrease=0.0,
                                                         min_samples_leaf=1,
                                                         min_samples_split=2,
                                                         min_weight_fraction_leaf=0.0,
                                                         n_estimators=100,
                                                         n_iter_no_change=Non...
                                            objective='binary:logistic', ...)),
                             ('Naive Bayes',
                              GaussianNB(priors=None, var_smoothing=1e-09)),
                             ('Ada Boost Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 base_estimator='deprecated',
                                                 estimator=None,
                                                 learning_rate=1.0,
                                                 n_estimators=50,
                                                 random_state=123))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft',
                 weights=[0.63, 0.64, 0.52, 0.06999999999999999, 0.33]), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000027C267D36A0>, system=True)
2023-11-26 11:22:50,694:INFO:Checking exceptions
2023-11-26 11:22:50,699:INFO:Preloading libraries
2023-11-26 11:22:50,723:INFO:Copying training dataset
2023-11-26 11:22:50,724:INFO:Plot type: boundary
2023-11-26 11:22:50,816:INFO:Fitting StandardScaler()
2023-11-26 11:22:50,823:INFO:Fitting PCA()
2023-11-26 11:22:50,898:INFO:Fitting Model
2023-11-26 11:22:53,038:INFO:Visual Rendered Successfully
2023-11-26 11:22:53,231:INFO:plot_model() successfully completed......................................
2023-11-26 11:32:20,336:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-26 11:32:20,381:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-26 11:32:20,419:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-26 11:32:20,459:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-26 11:32:20,506:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-26 11:36:35,319:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-26 11:36:35,367:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-26 11:36:35,408:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-26 11:36:35,446:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-11-26 11:36:35,514:WARNING:d:\io\Anaconda\envs\dev\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

